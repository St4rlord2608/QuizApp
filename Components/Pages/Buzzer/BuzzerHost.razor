@page "/buzzer/host/{lobbyId?}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using QuizApp.Components.Icons
@using QuizApp.Services
@using QuizApp.Models
@inject NavigationManager Navigation
@inject BuzzerLobbyManagementService BuzzerService
@inject UserService UserService
@inject IJSRuntime JS
@implements IAsyncDisposable
<div class="container buzzer-host-container">
    @if (lobbyData.LobbyCode != null)
    {
        
        <h1 class="title-centered">Host</h1>
        <div class="buzzer-lobby-code-container">
            <input id="buzzer-lobby-code" class="form-control buzzer-lobby-code" type="text" value="@lobbyId" aria-label="Lobby_code" readonly>
            <button type="button" class="btn btn-primary" onclick="copyToClipboard()" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Copy to clipboard">
                <ClipboardFill Height="25" Width="25" />
            </button>
            <span data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Settings">
                <button type="button" class="btn settings-button" data-bs-toggle="modal" data-bs-target="#settings-modal" >
                <GearFill Width="30" Height="30" />
            </button>
            </span>
        </div>
        <div class="input-group buzzer-host-text-container">
          <span class="input-group-text">Text for players</span>
          <textarea @bind="textForPlayers" @bind:after="TextForPlayersChange" class="form-control" aria-label="Text for players"></textarea>
        </div>
        <div class="input-group buzzer-host-number-guess-container">
            <span class="input-group-text">Searched Number</span>
            <input @bind="searchedNumber" @bind:after="SearchedNumberChange" class="form-control" aria-label="Searched Number"/>
        </div>
        <div class="card buzzer-host-buzzer-container">
          <div class="card-body">
            <h5 class="card-title">Buzzer</h5>
            <h6 class="card-subtitle mb-2 text-body-secondary">Buzzered User: @buzzedUserName</h6>
            <div class="card-text">
                
                <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                  <button @onclick="UserScored" disabled="@(!lobbyData.IsBuzzed || lobbyData.BuzzedUserID == 0)" class="btn btn-success">Score</button>
                        <button @onclick="UserFailed" disabled="@(!lobbyData.IsBuzzed || lobbyData.BuzzedUserID == 0)" class="btn btn-danger">Fail</button>
                  <button @onclick="ChangeBuzzerState" class="btn btn-primary">@buzzerText</button>
                </div>
            </div>
          </div>
        </div>
        
        <div class="buzzer-host-unlock-all-text">   
            <button @onclick="UnlockText" class="btn btn-warning">Unlock all texts</button>
        </div>
        <div class="buzzer-player-card-container">
            @foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
            {
                <div class="card buzzer-player-card" id="user-data-@buzzerLobby.UserID">
                  <div class="card-body">
                        <button onclick="@(() => OpenKickModal(buzzerLobby))" class="btn-close buzzer-host-kick-player-button"
                                aria-label="close" data-bs-toggle="modal" data-bs-target="#kick-modal" />
                    <h5 class="card-title buzzer-player-card-username">@UserDictionary[buzzerLobby.UserID].UserName</h5>
                    <div class="card-subtitle mb-2 text-body-secondary">
                        <div class="input-group mb-3">
                          <span class="input-group-text" id="basic-addon1">Points</span>
                          <input type="number" class="form-control" value="@buzzerLobby.Points" onchange="@((ChangeEventArgs e) => UserPointsChanged(e, buzzerLobby))">
                        </div>
                        </div>
                    <div class="card-text">
                       <div class="input-group">
                            <textarea value="@buzzerLobby.Text" class="form-control" aria-label="Text from player" readonly/>
                       </div>
                    </div>
                  </div>
                  <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                          <div class="input-group buzzer-host-player-card-checkbox-container">
                              <span class="input-group-text" id="basic-addon1">Text Locked</span>
                              <div class="input-group-text">
                                  <input type="checkbox" class="form-check-input" disabled checked="@buzzerLobby.TextLocked"/>
                              </div>
                           </div>
                      </li>
                    <li class="list-group-item"><button class="btn btn-success" disabled="@(!buzzerLobby.TextLocked)" onclick="@(() => UserTextIsCorrect(buzzerLobby))">Give Points</button></li>
                    <li class="list-group-item"><button class="btn btn-warning" disabled="@(!buzzerLobby.TextLocked)" onclick="@(() => UnlockSingleText(buzzerLobby))">Unlock Text</button></li>
                  </ul>
                </div>
            }
        </div>
        <div class="modal fade" id="kick-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="settings-modal-header">Kick Player @playerToKickName</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>The user will be removed completely. So every progress in this lobby will be lost for him</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="@(() => KickPlayer())">Kick</button>
                        </div>
                    </div>
                </div>
            </div>
        <div class="modal fade" id="settings-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h1 class="modal-title fs-5" id="settings-modal-header">Settings</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                 <div class="input-group correct-answer-container">
                    <span class="input-group-text">Points for correct answer</span>
                    <input type="number" class="form-control" @bind="scorePoints" />
                </div>
                <div class="input-group incorrect-answer-container">
                    <span class="input-group-text">Points for incorrect answer</span>
                    <input type="number" class="form-control" @bind="failPoints" />
                </div>
                
              </div>
            </div>
          </div>
        </div>
    }
    else
    {
        <div>lobby doesnt exist</div>
    }
</div>
<script>
    
    function copyToClipboard() 
    {
        navigator.clipboard.writeText(document.getElementById("buzzer-lobby-code").value)
    }
    InitTooltips();
</script>


@code {
    [Parameter]
    public string? lobbyId { get; set; }
    private int scorePoints = 5;
    private int failPoints = 1;
    private string textForPlayers = "";
    private string searchedNumber = "";
    private string buzzedUserName = "";
    private List<BuzzerLobby> buzzerLobbies = new List<BuzzerLobby>();
    private Dictionary<int, User> UserDictionary = new Dictionary<int, User>();
    private HubConnection? hubConnection;
    private Lobby lobbyData;
    private string buzzerText => lobbyData.IsBuzzed? "Reset Buzzer" : "Lock Buzzer";
    private BuzzerLobby playerToKick = new BuzzerLobby();
    private string playerToKickName = "";

    protected override async Task OnInitializedAsync()
    {
        RefreshLobbyTime();
        await InitHubConnection();
        buzzerLobbies = BuzzerService.GetAllBuzzerLobbiesForLobby(lobbyId).ToList();
        foreach(BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            UserDictionary.Add(buzzerLobby.UserID, UserService.GetUser(buzzerLobby.UserID));
        }
        lobbyData = BuzzerService.GetLobby(lobbyId);
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", lobbyId);
    }

    private async Task InitHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/buzzhub"))
            .Build();

        hubConnection.On<int, string, bool>("ReceiveBuzzChange", (userId, username, buzzState) =>
        {
            lobbyData.IsBuzzed = buzzState;
            lobbyData.BuzzedUserID = userId;
            buzzedUserName = username;
            if (buzzState && userId != 0)
            {
                JS.InvokeVoidAsync("PlayBuzzSound");
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, string, string>("ReceiveTextChange", (userId, username, text) =>
        {
            buzzerLobbies.First(buzzerLobby => buzzerLobby.UserID == userId).Text = text;
            if (searchedNumber != "")
            {
                HandleNearestPlayer();
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveTextLock", (userId) =>
        {
            buzzerLobbies.First(buzzerLobby => buzzerLobby.UserID == userId).TextLocked = true;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, string>("ReceiveJoinLobby", (userId, username) =>
        {
            buzzerLobbies.Add(BuzzerService.GetBuzzerLobby(lobbyData.LobbyCode, userId));
            UserDictionary.Add(userId, UserService.GetUser(userId));
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveLeaveLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserLeave", userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveReJoinLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserRejoin", userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveAnswerOnAskForPlayers", (userId) =>
        {
            JS.InvokeVoidAsync("UserRejoin", userId);
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            foreach(BuzzerLobby buzzerLobby in buzzerLobbies)
            {
                await JS.InvokeVoidAsync("UserLeave", buzzerLobby.UserID);
            }
            await hubConnection.SendAsync("AskForPlayers", lobbyId);
            AskForPlayer();
        }
    }

    private async Task AskForPlayer()
    {
        await hubConnection.SendAsync("AskForPlayers", lobbyId);
        await Task.Delay(60000);
        AskForPlayer();
    }

    private async void RefreshLobbyTime()
    {
        BuzzerService.RefreshLobbyTime(lobbyId);
        await Task.Delay(1740000);
        RefreshLobbyTime();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task UserTextIsCorrect(BuzzerLobby buzzerLobby)
    {
        buzzerLobby.Points += scorePoints;
        await ChangePoints(buzzerLobby, false);
        await InvokeAsync(StateHasChanged);
    }

    private async Task UnlockSingleText(BuzzerLobby buzzerLobby)
    {
        buzzerLobby.TextLocked = false;
        BuzzerService.ChangeTextLockedStateForBuzzerLobby(lobbyId, buzzerLobby.TextLocked, buzzerLobby.UserID);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ResetSingleTextLock", lobbyId, buzzerLobby.UserID);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task UserPointsChanged(ChangeEventArgs changeEventArgs, BuzzerLobby buzzerLobby)
    {
        buzzerLobby.Points = Convert.ToInt32(changeEventArgs.Value);
        await ChangePoints(buzzerLobby, false);
    }

    private async Task UserScored()
    {
        foreach(BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            int newPoints = buzzerLobby.Points;
            if (buzzerLobby.UserID == lobbyData.BuzzedUserID)
            {
                newPoints = buzzerLobby.Points + scorePoints;
            }
            buzzerLobby.Points = newPoints;
            await JS.InvokeVoidAsync("PlayCorrectSound");
            await ChangePoints(buzzerLobby, true, true);
        }
        await ChangeBuzzerState();
    }

    private async Task UserFailed()
    {
        foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            int newPoints = buzzerLobby.Points + failPoints;
            if (buzzerLobby.UserID == lobbyData.BuzzedUserID)
            {
                newPoints = buzzerLobby.Points;
            }
            buzzerLobby.Points = newPoints;
            await JS.InvokeVoidAsync("PlayWrongSound");
            await ChangePoints(buzzerLobby, true);
        }
        await ChangeBuzzerState();
    }

    private async Task ChangePoints(BuzzerLobby buzzerLobby, bool wasBuzzed, bool correct = false)
    {
        BuzzerService.UpdateBuzzerLobbyPoints(lobbyId, buzzerLobby.UserID, buzzerLobby.Points);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ChangePoints", lobbyId, buzzerLobby.UserID, buzzerLobby.Points, wasBuzzed, correct);
        }
    }

    private async Task ChangeBuzzerState()
    {
        lobbyData.IsBuzzed = !lobbyData.IsBuzzed;
        lobbyData.BuzzedUserID = 0;
        buzzedUserName = "";
        BuzzerService.ChangeBuzzedStateForLobby(lobbyId, lobbyData.IsBuzzed, lobbyData.BuzzedUserID);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ChangeBuzz", lobbyId, 0, "", lobbyData.IsBuzzed);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task UnlockText()
    {
        foreach(BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            buzzerLobby.TextLocked = false;
            BuzzerService.ChangeTextLockedStateForBuzzerLobby(lobbyId, buzzerLobby.TextLocked, buzzerLobby.UserID);
        }
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ResetTextLock", lobbyId);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task TextForPlayersChange()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TextForPlayersChange", lobbyId, textForPlayers);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchedNumberChange(){
        await HandleNearestPlayer();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNearestPlayer(){
        BuzzerLobby currentNearestPlayer = new BuzzerLobby();
        string currentNearestPlayerNumberString = "";
        List<BuzzerLobby> nearestPlayerList = new List<BuzzerLobby>();
        string concatSearchedNumberString = string.Concat(searchedNumber.Where(c => Char.IsDigit(c) || (int)c == 45));
        foreach(BuzzerLobby buzzerLobby in buzzerLobbies){
            await JS.InvokeVoidAsync("HandleNearestPlayerVisual", buzzerLobby.UserID, false);
            string numberString = string.Concat(buzzerLobby.Text.Where(c => (Char.IsDigit(c) || (int)c == 45) ));
            string concatCurrentNearestPlayerNumberString = string.Concat(currentNearestPlayerNumberString.Where(c => Char.IsDigit(c) || (int)c == 45));
            long searchedNumberInt = 0;
            long currentNearestPlayerNumberInt = 0;
            long numberInt = 0;
            try{
                searchedNumberInt = Convert.ToInt64(concatSearchedNumberString);
                if (concatCurrentNearestPlayerNumberString != "") currentNearestPlayerNumberInt = Convert.ToInt64(concatCurrentNearestPlayerNumberString);
                numberInt = Convert.ToInt64(numberString);
            }catch{
                continue;
            }
            long currentNearestDifference = Math.Abs(searchedNumberInt - currentNearestPlayerNumberInt);
            long numberDifference = Math.Abs(searchedNumberInt - numberInt);
            if (numberString == "")
            {
                continue;
            }else if(currentNearestPlayerNumberString == "")
            {
                currentNearestPlayer = buzzerLobby;
                currentNearestPlayerNumberString = numberString;
                nearestPlayerList = new List<BuzzerLobby> { currentNearestPlayer };
            }
            else if (currentNearestDifference == numberDifference)
            {
                nearestPlayerList.Add(buzzerLobby);
            }
            else if (currentNearestDifference > numberDifference)
            {
                currentNearestPlayer = buzzerLobby;
                currentNearestPlayerNumberString = numberString;
                nearestPlayerList = new List<BuzzerLobby> { currentNearestPlayer };
            }
        }
        foreach(BuzzerLobby buzzerLobby in nearestPlayerList)
        {
            await JS.InvokeVoidAsync("HandleNearestPlayerVisual", buzzerLobby.UserID, true);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void OpenKickModal(BuzzerLobby buzzerLobby)
    {
        playerToKick = buzzerLobby;
        playerToKickName = @UserDictionary[playerToKick.UserID].UserName;
        await InvokeAsync(StateHasChanged);
    }

    private async Task KickPlayer()
    {
        BuzzerService.DeleteBuzzerLobby(playerToKick.LobbyCode, playerToKick.UserID);
        buzzerLobbies.RemoveAll(b => b.UserID == playerToKick.UserID);
        UserDictionary.Remove(playerToKick.UserID);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("KickPlayer", lobbyId, playerToKick.UserID);
        }
        playerToKick = new BuzzerLobby();
        await InvokeAsync(StateHasChanged);
    }
}
