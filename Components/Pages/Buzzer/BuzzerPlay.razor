@page "/buzzer/play/{lobbyId?}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using QuizApp.Models
@using QuizApp.Services
@inject NavigationManager Navigation
@inject BuzzerLobbyManagementService BuzzerService
@inject IJSRuntime JS
@inject UserService UserService
@implements IAsyncDisposable

@if(buzzerLobbies.Count > 0)
{
    <div>
        <h3>BuzzerPlay</h3>
        <label>Input:</label>
        <textarea disabled="@buzzerLobby.TextLocked" @bind="text" @bind:event="oninput" @bind:after="InputChange" />
        <button disabled="@buzzerLobby.TextLocked" @onclick="LockText">Lock answer</button>
        <button id="buzzer" @onclick="Buzz" disabled="@lobbyData.IsBuzzed">Buzzer</button>
        <p>Text from Host:</p>
        <p>@textFromHost</p>
        <p>Buzzed user: @buzzedUserName</p>
        <table>
            <tr>
                <th>Username</th>
                <th>Points</th>
            </tr>
            @foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
            {
                <tr id="user-data-@buzzerLobby.UserID">
                    <th>@UserDictionary[buzzerLobby.UserID].UserName</th>
                    <th>@buzzerLobby.Points</th>
                </tr>
            }
        </table>
    </div>
}
else
{
    <div>
        <p>This Lobby doesnt exist</p>
    </div>
}


<script>
    var spaceBarPressed = false
    document.addEventListener("keydown", function (event) {
        if (document.activeElement.tagName != 'INPUT' && document.activeElement.tagName != 'TEXTAREA') {
            if (event.keyCode === 32 && !spaceBarPressed) {
                event.preventDefault();
                var buzzer = document.getElementById("buzzer");
                buzzer.click();
                spaceBarPressed = true;
            }
        }
        
    });
    document.addEventListener("keyup", function (event) {
        if (event.keyCode === 32) {
            spaceBarPressed = false;
        }
    });
</script>

@code {
    [Parameter]
    public string? lobbyId { get; set; }
    private string text = "";
    private string username = "";
    private string textFromHost = "";
    private int userID;
    private int points;
    private string buzzedUserName = "";
    private BuzzerLobby buzzerLobby = new BuzzerLobby();
    private List<BuzzerLobby> buzzerLobbies = new List<BuzzerLobby>();
    private Dictionary<int, User> UserDictionary = new Dictionary<int, User>();
    private Lobby lobbyData;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        buzzerLobbies = BuzzerService.GetAllBuzzerLobbiesForLobby(lobbyId).ToList();
        foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            UserDictionary.Add(buzzerLobby.UserID, UserService.GetUser(buzzerLobby.UserID));
        }
        lobbyData = BuzzerService.GetLobby(lobbyId);
        await InitHubConnection();
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", lobbyId);
    }

    private async Task InitHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/buzzhub"))
            .Build();

        hubConnection.On<int, string, bool>("ReceiveBuzzChange", (userId, username, buzzState) =>
        {
            lobbyData.IsBuzzed = buzzState;
            lobbyData.BuzzedUserID = userID;
            buzzedUserName = username;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, int>("ReceiveChangePoints", (changeUserID, newPoints) =>
        {
            if (userID == changeUserID)
            {
                points = newPoints;
            }
            buzzerLobbies.First(buzzerLobby => buzzerLobby.UserID == changeUserID).Points = newPoints;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, string>("ReceiveJoinLobby", (userId, username) =>
        {
            AddBuzzerLobby(userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("ReceiveResetTextLock", () =>
        {
            buzzerLobby.TextLocked = false;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveResetSingleTextLock", (userID) =>
        {
            if(buzzerLobby.UserID == userID)
            {
                buzzerLobby.TextLocked = false;
                InvokeAsync(StateHasChanged);
            }

        });
        hubConnection.On<string>("ReceiveTextForPlayersChange", (receivedTextFromHost) =>
        {
            textFromHost = receivedTextFromHost;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveKickPlayer", (userID) =>
        {
            buzzerLobbies.RemoveAll(b => b.UserID == buzzerLobby.UserID);
            if(buzzerLobby.UserID == userID)
            {
                Navigation.NavigateTo("/buzzer");
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveLeaveLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserLeave", userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveReJoinLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserRejoin", userId);
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            username = await JS.InvokeAsync<string>("GetFromLocalStorage", "username");
            userID = Convert.ToInt32(await JS.InvokeAsync<string>("GetFromLocalStorage", "userID"));
            buzzerLobby = BuzzerService.GetBuzzerLobby(lobbyId, userID);
            if (buzzerLobby.LobbyCode == null)
            {
                BuzzerService.AddBuzzerLobby(lobbyId, userID, 0);
                buzzerLobby = new BuzzerLobby() { LobbyCode = lobbyId, UserID = userID, Points = 0 };
                await hubConnection.SendAsync("JoinedLobby", lobbyData.LobbyCode, userID, username);
                await AddBuzzerLobby(userID);
            }
            else
            {
                await hubConnection.SendAsync("ReJoinLoby", lobbyData.LobbyCode, userID);
            }
            points = buzzerLobby.Points;
            await InvokeAsync(StateHasChanged);
        } 
    }

    private async Task AddBuzzerLobby(int userId)
    {
        BuzzerLobby buzzerLobby = BuzzerService.GetBuzzerLobby(lobbyData.LobbyCode, userId);
        if (buzzerLobby.LobbyCode == null) return;
        buzzerLobbies.Add(buzzerLobby);
        UserDictionary.Add(userId, UserService.GetUser(userId));
    }

    private async void InputChange()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TextInputChange", lobbyId, userID, username, text);
        }
    }

    private async void Buzz()
    {
        lobbyData.IsBuzzed = !lobbyData.IsBuzzed;
        BuzzerService.ChangeBuzzedStateForLobby(lobbyId, lobbyData.IsBuzzed, userID);
        buzzedUserName = username;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ChangeBuzz", lobbyId, userID, username, lobbyData.IsBuzzed);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void LockText()
    {
        buzzerLobby.TextLocked = true;
        BuzzerService.ChangeTextLockedStateForBuzzerLobby(lobbyId, buzzerLobby.TextLocked, userID);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TextLock", lobbyId, userID);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveLobby", lobbyData.LobbyCode, userID);
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}
