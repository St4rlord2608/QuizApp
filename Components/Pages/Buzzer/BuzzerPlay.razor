@page "/buzzer/play/{lobbyId?}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using QuizApp.Models
@using QuizApp.Services
@using QuizApp.Components.Icons
@inject NavigationManager Navigation
@inject BuzzerLobbyManagementService BuzzerService
@inject IJSRuntime JS
@inject UserService UserService
@implements IAsyncDisposable

<div class="container-sm buzzer-play-container">
    @if(buzzerLobbies.Count > 0)
    {
        <div>
            <div class="heading-container">
                <h1 class="title-centered">BuzzerPlay</h1>
                <div class="settings-container" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Settings">
                    <button type="button" class="btn settings-button" data-bs-toggle="modal" data-bs-target="#settings-modal">
                        <GearFill Width="30" Height="30"/>
                    </button>
                </div>
            </div>
            <div class="input-group input-group-dark-mode buzzer-host-text">
                <span class="input-group-text">Text from Host</span>
                <textarea value="@textFromHost" class="form-control" aria-label="Text from Host" readonly></textarea>
            </div>
            <div class="buzzer-play-buzzer-container">
                <button id="buzzer" @onclick="Buzz" disabled="@lobbyData.IsBuzzed" class="btn btn-success buzzer-play-buzzer">Buzzer</button>
                <div class="buzzer-play-buzzer-text">Buzzed user: @buzzedUserName</div>
            </div>
            <div class="buzzer-play-input-container">
                <div class="input-group input-group-dark-mode buzzer-play-input">
                    <span class="input-group-text">Input</span>
                    <textarea class="form-control" aria-label="Input" disabled="@buzzerLobby.TextLocked" @bind="text" @bind:event="oninput" @bind:after="InputChange"></textarea>
                </div>
                <button disabled="@buzzerLobby.TextLocked" @onclick="LockText" class="btn btn-dark-mode btn-primary">Lock answer</button>
            </div>
            <div class="buzzer-player-card-container">
                @foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
                {
                    <div class="card card-dark-mode buzzer-player-card" id="user-data-@buzzerLobby.UserID">
                        <div class="card-body">
                            <h5 class="card-title buzzer-player-card-username">@UserDictionary[buzzerLobby.UserID].UserName</h5>
                            <div class="card-subtitle mb-2 text-body-secondary">
                                <div class="input-group input-group-dark-mode mb-3">
                                    <span class="input-group-text" id="basic-addon1">Points</span>
                                    <input type="number" class="form-control" value="@buzzerLobby.Points" readonly>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="modal modal-dark-mode fade" id="settings-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="settings-modal-header">Settings</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="volume-container">
                            <label for="volume" class="form-label">Volume</label>
                            <input @bind="vol" type="range" class="form-range" min="0" max="10" step="1" id="volume">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
    <div class="failure-container-centered">
        <h1>lobby doesnt exist!</h1>
        <button type="button" class="btn btn-primary" onclick="@(() => Navigation.NavigateTo("/buzzer"))">Return to buzzer menu</button>
    </div>
    }
</div>



<script>
    var spaceBarPressed = false
    document.addEventListener("keydown", function (event) {
        if (document.activeElement.tagName != 'INPUT' && document.activeElement.tagName != 'TEXTAREA') {
            if (event.keyCode === 32 && !spaceBarPressed) {
                event.preventDefault();
                var buzzer = document.getElementById("buzzer");
                buzzer.click();
                spaceBarPressed = true;
            }
        }
        
    });
    document.addEventListener("keyup", function (event) {
        if (event.keyCode === 32) {
            spaceBarPressed = false;
        }
    });

    AddOnClickBuzzerEventListener();
</script>

@code {
    [Parameter]
    public string? lobbyId { get; set; }
    private string text = "";
    private string username = "";
    private string textFromHost = "";
    private int userID;
    private int points;
    private string buzzedUserName = "";
    private BuzzerLobby buzzerLobby = new BuzzerLobby();
    private List<BuzzerLobby> buzzerLobbies = new List<BuzzerLobby>();
    private Dictionary<int, User> UserDictionary = new Dictionary<int, User>();
    private Lobby lobbyData;
    private double vol = 1;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        buzzerLobbies = BuzzerService.GetAllBuzzerLobbiesForLobby(lobbyId).ToList();
        foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
        {
            UserDictionary.Add(buzzerLobby.UserID, UserService.GetUser(buzzerLobby.UserID));
        }
        lobbyData = BuzzerService.GetLobby(lobbyId);
        await InitHubConnection();
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", lobbyId);
    }

    private async Task InitHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/buzzhub"))
            .Build();

        hubConnection.On<int, string, bool>("ReceiveBuzzChange", (userId, username, buzzState) =>
        {
            lobbyData.IsBuzzed = buzzState;
            lobbyData.BuzzedUserID = userID;
            buzzedUserName = username;
            if (buzzState && userId != 0)
            {
                JS.InvokeVoidAsync("PlayBuzzSound", vol);
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, int, bool, bool>("ReceiveChangePoints", (changeUserID, newPoints, wasBuzzed, correct) =>
        {
            if (wasBuzzed)
            {
                if (correct)
                {
                    JS.InvokeVoidAsync("PlayCorrectSound", vol);
                }
                else
                {
                    JS.InvokeVoidAsync("PlayWrongSound", vol);
                }
            }
            if (userID == changeUserID)
            {
                points = newPoints;
            }
            buzzerLobbies.First(buzzerLobby => buzzerLobby.UserID == changeUserID).Points = newPoints;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, string>("ReceiveJoinLobby", (userId, username) =>
        {
            AddBuzzerLobby(userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("ReceiveResetTextLock", () =>
        {
            buzzerLobby.TextLocked = false;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveResetSingleTextLock", (userID) =>
        {
            if(buzzerLobby.UserID == userID)
            {
                buzzerLobby.TextLocked = false;
                InvokeAsync(StateHasChanged);
            }

        });
        hubConnection.On<string>("ReceiveTextForPlayersChange", (receivedTextFromHost) =>
        {
            textFromHost = receivedTextFromHost;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveKickPlayer", (userID) =>
        {
            buzzerLobbies.RemoveAll(b => b.UserID == userID);
            if(buzzerLobby.UserID == userID)
            {
                Navigation.NavigateTo("/buzzer");
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveLeaveLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserLeave", userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveReJoinLobby", (userId) =>
        {
            JS.InvokeVoidAsync("UserRejoin", userId);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveAskForPlayers", (connectionId) =>
        {
            hubConnection.SendAsync("AnswerOnAskForPlayers", connectionId, buzzerLobby.UserID);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int>("ReceiveAnswerOnAskForPlayers", (userId) =>
        {
            JS.InvokeVoidAsync("UserRejoin", userId);
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            username = await JS.InvokeAsync<string>("GetFromLocalStorage", "username");
            userID = Convert.ToInt32(await JS.InvokeAsync<string>("GetFromLocalStorage", "userID"));
            buzzerLobby = BuzzerService.GetBuzzerLobby(lobbyId, userID);
            if (buzzerLobby.LobbyCode == null)
            {
                BuzzerService.AddBuzzerLobby(lobbyId, userID, 0);
                buzzerLobby = new BuzzerLobby() { LobbyCode = lobbyId, UserID = userID, Points = 0 };
                await hubConnection.SendAsync("JoinedLobby", lobbyData.LobbyCode, userID, username);
                await AddBuzzerLobby(userID);
            }
            else
            {
                await hubConnection.SendAsync("ReJoinLoby", lobbyData.LobbyCode, userID);
            }
            points = buzzerLobby.Points;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(500);
            foreach (BuzzerLobby buzzerLobby in buzzerLobbies)
            {
                if (buzzerLobby.UserID == userID) continue;
                await JS.InvokeVoidAsync("UserLeave", buzzerLobby.UserID);
            }
            await hubConnection.SendAsync("AskForPlayers", lobbyId);
            await InvokeAsync(StateHasChanged);
            await AskForPlayer();
        } 
    }

    private async Task AskForPlayer()
    {
        await hubConnection.SendAsync("AskForPlayers", lobbyId);
        await Task.Delay(60000);
        AskForPlayer();
    }

    private async Task AddBuzzerLobby(int userId)
    {
        BuzzerLobby buzzerLobby = BuzzerService.GetBuzzerLobby(lobbyData.LobbyCode, userId);
        if (buzzerLobby.LobbyCode == null) return;
        buzzerLobbies.Add(buzzerLobby);
        UserDictionary.Add(userId, UserService.GetUser(userId));
    }

    private async void InputChange()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TextInputChange", lobbyId, userID, username, text);
        }
    }

    private async void Buzz()
    {
        lobbyData.IsBuzzed = !lobbyData.IsBuzzed;
        BuzzerService.ChangeBuzzedStateForLobby(lobbyId, lobbyData.IsBuzzed, userID);
        buzzedUserName = username;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ChangeBuzz", lobbyId, userID, username, lobbyData.IsBuzzed);
        }
        await JS.InvokeVoidAsync("PlayBuzzSound", vol);
        await InvokeAsync(StateHasChanged);
    }

    private async void LockText()
    {
        buzzerLobby.TextLocked = true;
        BuzzerService.ChangeTextLockedStateForBuzzerLobby(lobbyId, buzzerLobby.TextLocked, userID);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("TextLock", lobbyId, userID);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveLobby", lobbyData.LobbyCode, userID);
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}
