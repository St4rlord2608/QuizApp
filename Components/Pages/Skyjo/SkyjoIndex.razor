@page "/skyjo"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using QuizApp.Models
@using QuizApp.Services
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject GeneralLobbyService LobbyService
@inject SkyjoService SkyjoService

<div class="container-sm buzzer-index-container">
    <h1 class="title-centered">Buzzer</h1>
    @if (hostingFailed)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Hosting failed!</strong> Try again later.
        </div>
    }
    
    <button @onclick="CreateLobbyCode" class="btn btn-secondary buzzer-host-button">Host Lobby</button>
    <div class="card card-dark-mode buzzer-join-container">
        <div class="card-body">
            <h5 class="card-title">Join Lobby</h5>
            <div class="input-group input-group-dark-mode">
                <input type="text" class="form-control" placeholder="Lobby code" aria-label="Lobby code" @bind="joinLobbyCode" @bind:event="oninput" @bind:after="OnLobbyCodeInput">
                <button @onclick="JoinLobby" class="btn btn-success">Join Lobby</button>
            </div>
        </div>
    </div>
    @if (lobbyDoesntExist)
    {
        <div class="alert alert-danger buzzer-lobby-alert" role="alert">
            Lobby code <strong>@joinLobbyCode</strong> does not exist!
        </div>
    }
</div>


@code {
    private string hostUrl = "/skyjo/";
    private string playUrl = "/skyjo/";
    private string lobbyCode = "";
    private string joinLobbyCode = "";
    private bool hostingFailed = false;
    private bool lobbyDoesntExist = false;
    private string username = "";
    private int userID;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || userID == 0)
        {
            GetUserFromLocalStorage();
        }
    }

    private async Task GetUserFromLocalStorage()
    {
        username = await JS.InvokeAsync<string>("GetFromLocalStorage", "username");
        userID = Convert.ToInt32(await JS.InvokeAsync<string>("GetFromLocalStorage", "userID"));
        if (userID == 0)
        {
            await Task.Delay(500);
            GetUserFromLocalStorage();
        }
    }

    private void CreateLobbyCode()
    {
        hostingFailed = false;
        int createAttempts = 0;
        lobbyCode = LobbyService.CreateLobbyCode();
        LobbyService.CheckForExpiredLobbies();
        var lobbies = LobbyService.GetLobbies().ToList();
        while (lobbies.FindIndex(element => element.LobbyCode == lobbyCode) >= 0)
        {
            lobbyCode = LobbyService.CreateLobbyCode();
            createAttempts++;
            if(createAttempts > 20)
            {
                hostingFailed = true;
                return;
            }

        }
        LobbyService.AddLobby(lobbyCode, userID, (int)GeneralLobbyService.LobbyTypeEnum.Skyjo);
        SkyjoService.AddLobbySkyjoData(lobbyCode);
        Navigation.NavigateTo(hostUrl + lobbyCode);
    }

    private void JoinLobby()
    {
        var lobbies = LobbyService.GetLobbies().ToList();
        if(lobbies.FindIndex(element => element.LobbyCode == joinLobbyCode && element.LobbyType == (int)GeneralLobbyService.LobbyTypeEnum.Skyjo) < 0)
        {
            lobbyDoesntExist = true;
        }
        else
        {
            lobbyDoesntExist = false;
            Navigation.NavigateTo(playUrl + joinLobbyCode);
        }
    }

    private void OnLobbyCodeInput()
    {
        hostingFailed = false;
        lobbyDoesntExist = false;
    }
}
